for (i in 1:4)
+ {
+   hist(iris[,i], main=colnames(iris)[i])
+ }
dskasd
for (i in 1:4)
hist(iris[,i], main=colnames(iris)[i])
par(mfrow=c(2,2))
for (i in 1:4)
hist(iris[,i], main=colnames(iris)[i])
library("knitr", lib.loc="~/Library/R/3.1/library")
install.packages(c("car", "colorspace", "manipulate", "Rcpp", "RcppArmadillo"))
install.packages("mgcv", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
source('~/.active-rstudio-document')
date: March 9, 2015
date: 3/9/2015
date:
#date:
date: 03-19-2015
legend("topleft", legend=levels(iris$Species), col=levels(iris$Species))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot")
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)))
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot")
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), lty=1, lwd=1)
print(1:length(levels(iris$Species)))
par(mfrow=c(2,2))
for (i in 1:(ncol(iris) - 1))
hist(iris[,i], main=colnames(iris[i]), xlab="centimeters")
par(mfrow=c(1,1))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot")
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), lty=1, lwd=1)
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot")
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), lwd=1)
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot")
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20)
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20)
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20)
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20)
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20, cex=1.5)
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20, cex=1.5)
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20)
print(1:length(levels(iris$Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20, cex=1.25)
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20, cex=1.25)
print(1:length(levels(iris$Species)))
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("lattice")
print(head(irisData))
irisData = select(iris, -Species)
print(head(irisData))
irisData = select(iris, -Species)
#print(head(irisData))
library(dplyr)
irisData = select(iris, -Species)
#print(head(irisData))
library(dplyr)
install.packages("dplyr")
library(dplyr)
irisData = select(iris, -Species)
print(head(irisData))
library(dplyr)
irisData = select(iris, -Species)
head(irisData)
irisData = scale(irisData)
head(irisData)
boxplot(irisData)
irisData = scale(irisData)
head(irisData)
boxplot(irisData)
boxplot(irisData$Petal.Width~iris$Species)
for (i in 1:(ncol(iris) - 1))
boxplot(irisData[,i] ~ iris$Species, main=colnames(iris)[i], ylab="centimeters")
pcIrisData = prcomp(irisData)
pcIrisData
pcIrisData = prcomp(t(irisData))
pcIrisData
pcIrisData = prcomp(irisData)
pcIrisData
plot(pcIrisData$x[,1], pcIrisData$x[,2], col=iris$Species, xlab="1st Principal Component", ylab="2nd Principal Component", pch=20, cex=1.25)
#ggplot(pcIrisData, aes(x=PC1, y=PC2, color=Species)) + geom_point()
plot(pcIrisData$x[,1], pcIrisData$x[,2], col=iris$Species, xlab="1st principal component", ylab="2nd principal component", pch=20, cex=1.25, main="Principal Components for iris data")
legend("topleft", legend=levels(iris$Species), col=iris$Species, pch=20, cex=1.25)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20, cex=1.25)
legend("topleft", legend=levels(iris$Species), col=iris$Species, pch=20, cex=1.25)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20, cex=1.25)
legend("topleft", legend=levels(iris$Species), col=levels(iris$Species), pch=20, cex=1.25)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20, cex=1.25)
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20, cex=1.25)
#ggplot(pcIrisData, aes(x=PC1, y=PC2, color=Species)) + geom_point()
plot(pcIrisData$x[,1], pcIrisData$x[,2], col=iris$Species, xlab="1st principal component", ylab="2nd principal component", pch=20, cex=1.25, main="Principal Components for iris data")
legend("topleft", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20, cex=1.25)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Basic scatterplot", pch=20, cex=1.25)
legend("topright", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20, cex=1.25)
plot(iris$Petal.Length, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width, main="Basic scatterplot")
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=10)
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=12)
```
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=111)
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=18)
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=15)
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=15, col="green")
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=15, col="red")
plot(iris$Petal.Length, iris$Petal.Width, main="Change axis labels", pch=15, col="red", xlab="Petal Length", ylab="Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, main="Change axis labels", pch=15, col="red", cex=3, xlab="Petal Length", ylab="Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, main="Change axis labels", pch=15, col="red", cex=2, xlab="Petal Length", ylab="Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, main="Basic scatterplot of petal features")
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, xlab="Sepal length", ylab="Sepal width", main="Sepal characteristics among species", pch=20, cex=1.25)
legend("topright", legend=levels(iris$Species), col=1:length(levels(iris$Species)), pch=20, cex=1.25)
plot(iris$Petal.Length, iris$Petal.Width, main="Change axis labels", pch=15, col="red", cex=2, xlab="Petal Length", ylab="Petal Width")
model <- lm(iris$Petal.Length ~ iris$Petal.Width)
abline(model, lwd = 2)
plot(iris$Petal.Length, iris$Petal.Width, main="Change axis labels", pch=15, col="red", cex=2, xlab="Petal Length", ylab="Petal Width")
model <- lm(iris$Petal.Width ~ iris$Petal.Length)
abline(model, lwd = 2)
plot(iris$Petal.Length, iris$Petal.Width, main="Plot regression line", pch=15, col="red", cex=2, xlab="Petal Length", ylab="Petal Width")
model <- lm(iris$Petal.Width ~ iris$Petal.Length)
abline(model, lwd = 2)
plot(iris$Petal.Length, iris$Petal.Width, main="Plot regression line", pch=15, col="red", cex=2, xlab="Petal Length", ylab="Petal Width")
model <- lm(iris$Petal.Width ~ iris$Petal.Length)
abline(model, lwd = 4)
plot(iris$Petal.Length, iris$Petal.Width, main="Plot regression line", pch=15, col="red", cex=2, xlab="Petal Length", ylab="Petal Width")
model <- lm(iris$Petal.Width ~ iris$Petal.Length)
abline(model, lwd = 4, lty=2)
plot(iris$Petal.Length, iris$Petal.Width, main="Change plotting character", pch=18)
plot(iris$Petal.Length, iris$Petal.Width, main="Change axis labels", pch=18, col="red", cex=1.5, xlab="Petal Length", ylab="Petal Width")
plot(iris$Petal.Length, iris$Petal.Width, main="Plot regression line", pch=18, col="red", cex=1.5, xlab="Petal Length", ylab="Petal Width")
model <- lm(iris$Petal.Width ~ iris$Petal.Length)
abline(model, lwd = 3, lty=2, col="gray")
abline(model, lwd = 3, lty=2, col="darkgray")
pca$rotation
pcIrisData$rotation
percent <- 100 * pcIrisData$sdev^2 / sum(pca$sdev^2)
percent
percent <- 100 * pcIrisData$sdev^2 / sum(pcIrisData$sdev^2)
percent
barplot(percent)
barplot(percent, names.arg=1:4, xlab="Principal Component", ylab="% variance explained")
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
xlim(-1.,1.25) +
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-1.,1.25) +
ylim(-1.,1.) +
coord_fixed() # fix aspect ratio to 1:1
library(ggplot)
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-1.,1.25) +
ylim(-1.,1.) +
coord_fixed() # fix aspect ratio to 1:1
library(ggplot2)
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-1.,1.25) +
ylim(-1.,1.) +
coord_fixed() # fix aspect ratio to 1:1
library(graphics)
library(ggplot2)
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-1.,1.25) +
ylim(-1.,1.) +
coord_fixed() # fix aspect ratio to 1:1
library(graphics)
library(ggplot2)
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
#ggplot(rotation_data) +
#  geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
#  geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
#  xlim(-1.,1.25) +
#  ylim(-1.,1.) +
#  coord_fixed() # fix aspect ratio to 1:1
library(ggplot2)
library(grid)
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
#ggplot(rotation_data) +
#  geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
#  geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
#  xlim(-1.,1.25) +
#  ylim(-1.,1.) +
#  coord_fixed() # fix aspect ratio to 1:1
library(ggplot2)
library(grid)
rotation_data <- data.frame(pcIrisData$rotation, variable=row.names(pcIrisData$rotation))
arrow_style <- arrow(length = unit(0.05, "inches"), type = "closed")
ggplot(rotation_data) +
geom_segment(aes(xend=PC1, yend=PC2), x=0, y=0, arrow=arrow_style) +
geom_text(aes(x=PC1, y=PC2, label=variable), hjust=0, size=3, color='red') +
xlim(-1.,1.25) +
ylim(-1.,1.) +
coord_fixed() # fix aspect ratio to 1:1
?prcomp
iris
?kmeans
install.packages("useful")
plot(k1, data=iris)
source('~/.active-rstudio-document')
k1 <- kmeans(x=iris[, 1:4], centers=3)
plot(k1)
plot(k1, data=iris)
k1 <- kmeans(x=iris[, 1:4], centers=3)
library(useful)
plot(k1)
irisData = iris[,-5] # Negative sign excludes the specified column
head(irisData)
irisData = scale(irisData)
head(irisData)
boxplot(irisData)
?subset
?c
x = rep(1, 1000)
x
hist(x)
plot(density(x))
ls()
library(dplyr)
?inner_join
setwd("~/GitRepos/TCGA_RNASeq_clinical/Analysis_datasets")
setwd("TCGA_RNASeq_clinical/Analysis_datasets")
setwd("~/GitRepos/TCGA_RNASeq_clinical/Analysis_datasets")
getwd()
rsem_her2_expected_counts<-read.table("GFP18_HER2_TCGA_Pipeline_Expected_Gene_Counts.txt", sep='\t', header=1, row.names=1, check.names=F) # This was downloaded from GEO Accession # GSE62820 and unzipped
# Rsubread pipeline, gene counts
feature<-read.table("GFP18_HER2_Rsubread_geneCounts.txt", sep='\t',header=1, row.names=1, check.names = F) # This was downloaded from GEO Accession # GSE62820 and unzipped
# TCGA pipeline, normalized expression files
TCGA_her2<-read.table("GFP18_HER2_TCGA_Pipeline_Normalized_Genes_Results.txt", sep='\t', header=1, check.names=F) # This was downloaded from GEO Accession # GSE62820 and unzipped
# Rsubread pipeline, FPKM values
rsub_fpkm<-read.table("GFP18_HER2_Rsubread_FPKM.txt", sep='\t',header=1, row.names=1, check.names = F) # This was downloaded from GEO Accession # GSE62820 and unzipped
rsub_fpkmlog<-log2(rsub_fpkm+1)
# Rsubread pipeline, TPM values
rsub_tpm<-read.table("GFP18_HER2_Rsubread_TPM.txt", sep='\t',header=1, row.names=1, check.names = F) # This was downloaded from GEO Accession # GSE62820 and unzipped
rsub_tpmlog<-log2(rsub_tpm+1)
# Clinical data
clinicals<-t(read.delim('TCGA20_clinical_data_ordered_all_clinical_variables_samples_as_columns.txt',sep='\t',header=1, row.names=1,check.names=F)) # This was downloaded from GEO Accession # GSE62820 and unzipped
```
# TCGA pipeline, expected counts
rsem_her2_expected_counts<-read.table("GFP18_HER2_TCGA_Pipeline_Expected_Gene_Counts.txt", sep='\t', header=1, row.names=1, check.names=F) # This was downloaded from GEO Accession # GSE62820 and unzipped
# Rsubread pipeline, gene counts
feature<-read.table("GFP18_HER2_Rsubread_geneCounts.txt", sep='\t',header=1, row.names=1, check.names = F) # This was downloaded from GEO Accession # GSE62820 and unzipped
# TCGA pipeline, normalized expression files
TCGA_her2<-read.table("GFP18_HER2_TCGA_Pipeline_Normalized_Genes_Results.txt", sep='\t', header=1, check.names=F) # This was downloaded from GEO Accession # GSE62820 and unzipped
# Rsubread pipeline, FPKM values
rsub_fpkm<-read.table("GFP18_HER2_Rsubread_FPKM.txt", sep='\t',header=1, row.names=1, check.names = F) # This was downloaded from GEO Accession # GSE62820 and unzipped
rsub_fpkmlog<-log2(rsub_fpkm+1)
# Rsubread pipeline, TPM values
rsub_tpm<-read.table("GFP18_HER2_Rsubread_TPM.txt", sep='\t',header=1, row.names=1, check.names = F) # This was downloaded from GEO Accession # GSE62820 and unzipped
rsub_tpmlog<-log2(rsub_tpm+1)
# Clinical data
clinicals<-t(read.delim('TCGA20_clinical_data_ordered_all_clinical_variables_samples_as_columns.txt',sep='\t',header=1, row.names=1,check.names=F)) # This was downloaded from GEO Accession # GSE62820 and unzipped
rsub_preds<-read.table("rsubread_10_14.txt", sep='\t', header=1, row.names=1)
tcga_preds<-read.table("Rsem_10_14.txt", sep='\t', header=1, row.names=1)
pancan12_zero<-read.table("PANCAN12_19583_by_3380_numZeroes.txt",row.names=1,sep='\t')# File is at Analysis_datasets
pancan20_tpm_zero<-read.table("PANCAN20_19583_by_3380_numZeroes.txt",sep='\t',row.names=1)# File is at Analysis_datasets
data12 = read.table("Classification_12_LUAD_LUSC_Predictions.txt", sep="\t", stringsAsFactors=FALSE, header=TRUE, row.names=1) # File is at Analysis_datasets
data20 = read.table("Classification_20_LUAD_LUSC_Predictions.txt", sep="\t", stringsAsFactors=FALSE, header=TRUE, row.names=1)# File is at Analysis_datasets
#This function calculates the standardized mean using Hedge's formula
standardized_mean<-function(m.1,sd.1,n.1,m.2,sd.2,n.2){
sd_pooled=sqrt(((n.1-1)*sd.1^2+(n.2-1)*sd.2^2)/(n.1+n.2-2))
(m.1-m.2)/sd_pooled
}
#This function merges two matrices on row names, sets the common items as rownames  and removes the extra column resulting from merge function.
merge_drop<-function(x,y,by=0)
{
new_m<-merge(x,y,by=by)
rownames(new_m)<-new_m$Row.names
return(new_m[,2:length(colnames(new_m))])
}
#This function plots the ROC based on the actual and predicted class
plotROC = function(actual, probabilities, plotCI=FALSE)
{
# bottom, left, top, right
par(mar=c(4.5, 4.7, 0.0, 0.5),lwd=4)
library(pROC)
roc_result = roc(actual ~ probabilities, ci=TRUE, plot=TRUE, print.auc=FALSE)
lowerBoundAuc = format(roc_result$ci[1], digits=3)
midAuc = format(roc_result$ci[2], digits=3)
upperBoundAuc = format(roc_result$ci[3], digits=3)
if (plotCI)
{
ci(roc_result)
sens.ci <- ci.se(roc_result)
plot(sens.ci, type="shape", col="gray95")
plot(sens.ci, type="bars")
plot(roc_result, add=TRUE)
}
text(0.5, 0.00, labels=paste("AUC: ", midAuc, " (", lowerBoundAuc, "-", upperBoundAuc, ")", sep=""))
par(mar=c(5.1, 4.1, 2.1, 2.1))
}
##########computing the empiric cumulative distribution per sample overlaied on same graph########
###using TCGA pipelined aligned data
ecdf_all_ex<-apply(log2(rsem_her2_expected_counts+1),2,ecdf)
par( mfrow = c( 1, 2 ) )
plot(ecdf_all_ex[[1]],xlab="log2(Total mapped reads)",ylab="Cumulative proportion",col="blue",main="TCGA pipeline",ylim=c(0,1),xlim = c(0,20),cex.axis=1.5, cex.lab=1.5)
legend(10,10,c("GFP", "HER2"), col = c("blue","brown"))
for(i in 2:12){lines(ecdf_all_ex[[i]],xlab=NA, ylab = NA,col="blue")}
for(i in 13:17){lines(ecdf_all_ex[[i]],xlab=NA, ylab = NA,col="brown")}
###using Rsubread pipeline aligned data
ecdf_all<-apply(log2(feature+1),2,ecdf)
plot(ecdf_all[[1]],xlab="log2(Total mapped reads)",ylab="Cumulative proportion",col="blue",main="Rsubread pipeline",ylim=c(0,1),xlim = c(0,20),cex.axis=1.5, cex.lab=1.5)
for(i in 2:12){lines(ecdf_all[[i]],xlab=NA,ylab = NA,col="blue")}
for(i in 13:17){lines(ecdf_all[[i]],xlab=NA,ylab = NA,col="brown")}
############computing total number of read counts per samples and plotting them as dot plots####
expected_counts<-apply(rsem_her2_expected_counts,2,sum)
feature_counts<-apply(feature,2,sum)
# Creating a plot showing total mapped reads per sample
par( mfrow = c( 1, 2 ),lwd=4 )
x = c(rep(1, 12), rep(2, 5)) # this indicates where on the x axis to plot
par(mar=c(3.1, 4.6, 2.1, 0.6)) # figure margins
boxplot(log2(expected_counts[1:12]+1), log2(expected_counts[13:17]+1),range=0,cex.axis=1.5, cex.lab=1.5,outpch=NA,lwd=4,ylim=c(20,25),xlab="", ylab="log2(Total mapped reads)",main="TCGA Pipeline",col='grey75',medcol="grey75",lwd=4,border = "grey35")
points(jitter(x, factor=2), c(log2(expected_counts[1:12]+1), log2(expected_counts[13:17]+1)), pch=4, cex=2, col=1,  xaxt="n",cex.lab=1.5)
axis(1, at=1:2, tick=T, labels=c("Control", "HER2"), cex.axis=1.5)
boxplot(log2(feature_counts[1:12]+1), log2(feature_counts[13:17]+1),range=0,cex.axis=1.5, cex.lab=1.5,outpch=NA,lwd=4,ylim=c(20,25),xlab="", ylab="log2(Total mapped reads)",col='grey75',medcol="grey75",lwd=4,main="Rsubread Pipeline",border = "grey35")
points(jitter(x, factor=1.5), c(log2(feature_counts[1:12]+1), log2(feature_counts[13:17]+1)), pch=4,cex=2,cex.lab=1.5,col="black")
axis(1, at=1:2, tick=T, labels=c("Control", "HER2"), cex.axis=1.5)
#######Boxplotting ERBB2 gene counts in HMEC samples#####
par(mfrow = c(1, 1),lwd=4)
names=c('TCGA\nGFP','TCGA\nHER2','Rsubread\nGFP', 'Rsubread\nHER2')
rsem_her2<-data.frame(t(rsem_her2_expected_counts["ERBB2",]))
rsub_her2<-data.frame(t(feature["ERBB2",]))
x = c(rep(1, 12), rep(2, 5),rep(3, 12), rep(4, 5))
boxplot(log2(rsem_her2$ERBB2[1:12]+1),log2(rsem_her2$ERBB2[13:17]+1),log2(rsub_her2$ERBB2[1:12]+1),log2(rsub_her2$ERBB2[13:17]+1),ylab="",range=0,cex.axis=1.5, cex.lab=1.5,outpch=NA,col='grey75',medcol="grey75",lwd=4,main=paste('Comparing TGCA and Rsubread Pipelines','\n', 'in Differentiating HER2 Overexpression from Controls',sep=''),border = "grey35")
points(jitter(rep(1,12),factor=2),log2(rsem_her2$ERBB2[1:12]+1),pch=4,cex=2,cex.lab=1.5,col="black")
points(jitter(rep(2,5),factor=2),log2(rsem_her2$ERBB2[13:17]+1),pch=4,cex=2,cex.lab=1.5,col='black')
points(jitter(rep(3,12),factor=2),log2(rsub_her2$ERBB2[1:12]+1),pch=4,cex=2,cex.lab=1.5,col='black')
points(jitter(rep(4,5),factor=2),log2(rsub_her2$ERBB2[13:17]+1),pch=4,cex=2,cex.lab=1.5,col='black')
axis(1, at=1:4, tick=T, labels=c("TCGA\nControl", "TCGA\nHER2","Rsubread\nControl", "Rsubread\nHER2"), cex.axis=0.8)
##using data processed by RSEM detected difference in her2 gene count in HER2 overexpressed versus GFP overexpressed samples
##t = -12.1833, df = 4.157, p-value = 0.0002081 but was worse than Rsubread
t.test(log2(rsem_her2$ERBB2[1:12]+1),log2(rsem_her2$ERBB2[13:17]+1))
##using not normalized data processed by Rsubread was much better at detecting difference in her2 gene count in HER2 overexpressed versus GFP overexpressed samples
##t = -46.6747, df = 8.35, p-value = 2.152e-11
t.test(log2(rsub_her2$ERBB2[1:12]+1),log2(rsub_her2$ERBB2[13:17]+1))
###########here we are computing standardized mean difference using the exprected gene counts from TCGA pipeline and gene counts from Rsubread algorithm ############
####Hedge's standardized mean/effect size using TCGA pipeline
standardized_mean(mean(log2(rsem_her2$ERBB2[13:17]+1)),sd(log2(rsem_her2$ERBB2[13:17]+1)),5,mean(log2(rsem_her2$ERBB2[1:12]+1)),sd(log2(rsem_her2$ERBB2[1:12]+1)),12)
####Hedge's standardized mean/effect size using Rsubread pipeline
standardized_mean(m.1=mean((log2(rsub_her2$ERBB2[13:17]+1))),sd.1=sd((log2(rsub_her2$ERBB2[13:17]+1))),n.1=5,m.2=mean((log2(rsub_her2$ERBB2[1:12]+1))),sd.2=sd((log2(rsub_her2$ERBB2[1:12]+1))),n.2 = 12)
#######################comparing gene counts results ############
par( mfrow = c( 1,3 ) ,lwd=4)
TCGA_her2_filtered<-TCGA_her2[!duplicated(TCGA_her2$Gene),]
rownames(TCGA_her2_filtered)<-TCGA_her2_filtered$Gene
TCGA_her2<-subset(TCGA_her2_filtered,select=-Gene)
TCGA_her2_log2<-log2(subset(TCGA_her2_filtered,select=-Gene)+1)
###Coefficient of variation in GFP samples across all common genes
####Coefficient of variation in TCGA pipeline processed data
com_genes_TCGA<-TCGA_her2[rownames(TCGA_her2)%in%rownames(rsub_fpkm),]
hist(na.omit(apply(com_genes_TCGA,1,sd)/apply(com_genes_TCGA,1,mean)),main = "TCGA Level 3",xlab = "Coefficient of variation",ylim=c(0,12500),lwd=4,ylab="Number of genes", breaks = 20)
hist(na.omit(apply(com_genes_TCGA[,1:12],1,sd)/apply(com_genes_TCGA[,1:12],1,mean)),main = "TCGA Level 3",xlab = "Coefficient of variation",ylim=c(0,12500),lwd=4,ylab="Number of genes", breaks = 20)
print(paste("Coefficient of variation in TCGA Level 3 data across 19585 genes in the control samples:",median(na.omit(apply(com_genes_TCGA[,1:12],1,sd)/apply(com_genes_TCGA[,1:12],1,mean))),sep=" "))
hist(na.omit(apply(com_genes_TCGA[,13:17],1,sd)/apply(com_genes_TCGA[,13:17],1,mean)),main = "TCGA Level 3",xlab = "Coefficient of variation",ylim=c(0,12500),lwd=4,ylab="Number of genes", breaks = 20)
print(paste("Coefficient of variation in TCGA Level 3 data across 19585 genes in the HER2-overexpressed samples:",median(na.omit(apply(com_genes_TCGA[,13:17],1,sd)/apply(com_genes_TCGA[,13:17],1,mean))),sep=" "))
tcga_her2_normalized<-data.frame(t(TCGA_her2["ERBB2",]))
####Coefficient of variation in Rsubread pipeline processed data
com_genes_fpkm<-rsub_fpkm[rownames(rsub_fpkm)%in%rownames(com_genes_TCGA),]
hist(na.omit(apply(com_genes_fpkm[,13:17],1,sd)/apply(com_genes_fpkm[,13:17],1,mean)),main = "Rsubread FPKM",xlab = "Coefficient of variation",ylim=c(0,12500),lwd=4,ylab="Number of genes",breaks=20)
print(paste("Coefficient of variation in Rsubread FPKM normalized data across 19585 genes in the control samples:",median((na.omit(apply(com_genes_fpkm[,1:12],1,sd)/apply(com_genes_fpkm[,1:12],1,mean)))),sep=''))
print(paste("Coefficient of variation in Rsubread FPKM normalized data across 19585 genes in the HER2-overexpressed samples:",median((na.omit(apply(com_genes_fpkm[,13:17],1,sd)/apply(com_genes_fpkm[,13:17],1,mean)))),sep=''))
rsub_fpkmlog_her2<-data.frame(t(rsub_fpkmlog["ERBB2",]))
rsub_fpkm_her2<-data.frame(t(rsub_fpkm["ERBB2",]))
com_genes_tpm<-rsub_fpkm[rownames(rsub_tpm)%in%rownames(com_genes_TCGA),]
hist(na.omit(apply(com_genes_tpm[,13:17],1,sd)/apply(com_genes_tpm[,13:17],1,mean)),main = "Rsubread TPM",xlab = "Coefficient of variation",ylim=c(0,12500),lwd=4,ylab="Number of genes")
print(paste("Coefficient of variation in Rsubread TPM normalized data across 19585 genes in the control samples:",median((na.omit(apply(com_genes_tpm[,1:12],1,sd)/apply(com_genes_tpm[,1:12],1,mean)))),sep=''))
print(paste("Coefficient of variation in Rsubread TPM normalized data across 19585 genes in the HER2-overexpressed samples:",median((na.omit(apply(com_genes_tpm[,13:17],1,sd)/apply(com_genes_tpm[,13:17],1,mean)))),sep=''))
rsub_tpm_her2<-data.frame(t(rsub_tpm["ERBB2",]))
rsub_tpmlog_her2<-data.frame(t(rsub_tpmlog["ERBB2",]))
#######post normalization ecdf
ecdf_all_ex<-apply(log2(TCGA_her2+1),2,ecdf)
par( mfrow = c( 1, 3 ) )
plot(ecdf_all_ex[[1]],xlab=NA, ylab = NA,col="blue",main="TCGA Level 3",ylim=c(0,1),xlim = c(0,20),cex.axis=1.5, cex.lab=1.5,)
for(i in 2:12){lines(ecdf_all_ex[[i]],xlab=NA, ylab = NA,col="blue")}
for(i in 13:17){lines(ecdf_all_ex[[i]],xlab=NA, ylab = NA,col="brown")}
###using Rsubread pipeline aligned data
ecdf_all<-apply(rsub_fpkmlog,2,ecdf)
plot(ecdf_all[[1]],col="blue",main="Rsubread FPKM",ylim=c(0,1),xlim = c(0,20),cex.axis=1.5, cex.lab=1.5,xlab="log2(normalized expression)",ylab="Cumulative proportion")
for(i in 2:12){lines(ecdf_all[[i]],xlab=NA,ylab = NA,col="blue")}
for(i in 13:17){lines(ecdf_all[[i]],xlab=NA,ylab = NA,col="brown")}
ecdf_all_t<-apply(rsub_tpmlog,2,ecdf)
plot(ecdf_all_t[[1]],col="blue",main="Rsubread TPM",ylim=c(0,1),xlim = c(0,20),cex.axis=1.5, cex.lab=1.5,xlab="log2(normalized expression)",ylab="Cumulative proportion")
for(i in 2:12){lines(ecdf_all_t[[i]],xlab=NA,ylab = NA,col="blue")}
for(i in 13:17){lines(ecdf_all_t[[i]],xlab=NA,ylab = NA,col="brown")}
###Creating boxplots of the normalized ERBB2 expression
par( mfrow = c( 1, 1 ) )
par(mar=c(5, 4.5, 3.5, 0.5))
boxplot(log2(tcga_her2_normalized$ERBB2[1:12]+1),log2(tcga_her2_normalized$ERBB2[13:17]+1),rsub_fpkmlog_her2$ERBB2[1:12],rsub_fpkmlog_her2$ERBB2[13:17],rsub_tpmlog_her2$ERBB2[1:12],rsub_tpmlog_her2$ERBB2[13:17],ylab="log2(HER2 gene expression values)",main="Comparing HER2 normalized expression between\n control and her2 samples",range=0,cex.axis=1.5, cex.lab=1.5,outpch=NA,col='grey75',medcol="grey75",lwd=4,border = "grey35")
names=c("TCGA\nGFP","TCGA\nHER2","Rsubred FPKM\nGFP", "Rsubred FPKM\nHER2","Rsubred TPM\nGFP", "Rsubred TPM\nHER2")
text(seq(1,6,by=1),par("usr")[3] - 2, labels = names, srt = 45, pos = 1, xpd = TRUE)
points(jitter(rep(1,12),factor=2),log2(tcga_her2_normalized$ERBB2[1:12]+1),pch=4,cex=2,cex.lab=1.5)
points(jitter(rep(2,5),factor=2),log2(tcga_her2_normalized$ERBB2[13:17]+1),pch=4,cex=2,cex.lab=1.5)
points(jitter(rep(3,12),factor=2),rsub_fpkmlog_her2$ERBB2[1:12],pch=4,cex=2,cex.lab=1.5)
points(jitter(rep(4,5),factor=2),rsub_fpkmlog_her2$ERBB2[13:17],pch=4,cex=2,cex.lab=1.5)
points(jitter(rep(5,12),factor=2),rsub_tpmlog_her2$ERBB2[1:12],pch=4,cex=2,cex.lab=1.5)
points(jitter(rep(6,5),factor=2),rsub_tpmlog_her2$ERBB2[13:17],pch=4,cex=2,cex.lab=1.5)
###t.test to see if there is significance
t.test(log2(tcga_her2_normalized$ERBB2[1:12]+1),log2(tcga_her2_normalized$ERBB2[13:17]+1))
t.test(rsub_fpkmlog_her2$ERBB2[1:12],rsub_fpkmlog_her2$ERBB2[13:17])
t.test(rsub_tpmlog_her2$ERBB2[1:12],rsub_tpmlog_her2$ERBB2[13:17])
###Standardized mean difference: TCGA pipeline normalized ERBB2 expression values
standardized_mean(m.1=mean((log2(tcga_her2_normalized$ERBB2[13:17]+1))),sd.1=sd((log2(tcga_her2_normalized$ERBB2[13:17]+1))),n.1=5,m.2=mean((log2(tcga_her2_normalized$ERBB2[1:12]+1))),sd.2=sd((log2(tcga_her2_normalized$ERBB2[1:12]+1))),n.2=12)
###Standardized mean difference: Rsubread pipeline FPKM normalized ERBB2 expression values
standardized_mean(mean(rsub_fpkmlog_her2$ERBB2[13:17]),sd(rsub_fpkmlog_her2$ERBB2[13:17]),5,mean(rsub_fpkmlog_her2$ERBB2[1:12]),sd(rsub_fpkmlog_her2$ERBB2[1:12]),12)
###Standardized mean difference:Rsubread pipeline TPM normalized ERBB2 expression values
standardized_mean(mean(rsub_tpmlog_her2$ERBB2[13:17]),sd(rsub_tpmlog_her2$ERBB2[13:17]),5,mean(rsub_tpmlog_her2$ERBB2[1:12]),sd(rsub_fpkmlog_her2$ERBB2[1:12]),12)
colnames(pancan12_zero)<-"PANCAN12"
colnames(pancan20_tpm_zero)<-"TPM"
all_zeros<-merge_drop(pancan12_zero,pancan20_tpm_zero)
#3380 samples are common
par(mfrow = c(1, 2),lwd=4)
h1<-hist(all_zeros$PANCAN12,xlab='',ylab='',main='',xlim=c(0,8000),ylim=c(0,800),lwd=4,breaks = 25)
abline(v=median(all_zeros$PANCAN12),col="red",lty=2)
h2<-hist(all_zeros$TPM,xlab='',ylab='',main='',xlim=c(0,8000),ylim=c(0,800),lwd=4,breaks=25)
abline(v=median(all_zeros$TPM),col="red",lty=2)
t.test(all_zeros$PANCAN12,all_zeros$TPM)
#############Predicted HER2 pathway activity analysis#############################################
all_preds<-merge_drop(rsub_preds,tcga_preds,by=0)
brca_clinical<-subset(clinicals,clinicals[,'tumor_tissue_site']=='Breast',select=c("bcr_patient_barcode","her2_status_by_ihc"))
common_all<-merge_drop(all_preds,brca_clinical,by=0)
all_preds_pos_neg<-subset(common_all,common_all$her2_status_by_ihc=="Negative"|common_all$her2_status_by_ihc=="Positive")
all_ranked<-apply(all_preds_pos_neg[,1:3],2,rank)
all<-cbind(all_ranked,all_preds_pos_neg[,4:5])
ihc_neg<-subset(all,all$her2_status_by_ihc=="Negative")
ihc_pos<-subset(all,all$her2_status_by_ihc=="Positive")
##############boxplot of ranked estimated HER2 pathway activity
##in TCGA BRCA samples####
par(mfrow = c(1, 1))
par(mar=c(5, 4.6, 2.5, 0.6)) # figure margins
boxplot(ihc_pos$Rsem_log_q_200_f,ihc_neg$Rsem_log_q_200_f,ihc_pos$FPKM_log_q_200_f,ihc_neg$FPKM_log_q_200_f,ihc_pos$TPM_log_q_200_f,ihc_neg$TPM_log_q_200_f,cex.axis=1.5, cex.lab=1.5,outpch=NA,range=0,cex.axis=1, cex.lab=0.7,outpch=NA,col='grey75',medcol="grey5",lwd=4,border = "grey5", main="Comparison of rank-based estimate \nof HER2 activation",ylab="Ranked HER2 prediction")
names=c("TCGA\nLevel3\nHER2(+)","TCGA\nLevel3\nHER2(-)","Rsubred\nFPKM\nHER2(+)", "Rsubred\nFPKM\nHER2(-)","Rsubred\nTPM\nHER2(+)", "Rsubred\nTPM\nHER2(-)")
text(seq(1,6,by=1),par("usr")[3] - 4.5, labels = names, srt = 45, pos = 1, xpd = TRUE)
ihc_neg_t<-subset(common_all,common_all$her2_status_by_ihc=="Negative")
ihc_pos_t<-subset(common_all,common_all$her2_status_by_ihc=="Positive")
##coefficient of variation in TCGA pipeline processed HER2 predictions
print(paste("Coefficient of variation in TCGA pipeline processed HER2 predictions in HER2(-) BRCA samples",sd(ihc_neg_t$Rsem_log_q_200_f)/mean(ihc_neg_t$Rsem_log_q_200_f),sep=' '))
print(paste("Coefficient of variation in TCGA pipeline processed HER2 predictions in HER2(+) BRCA samples",sd(ihc_pos_t$Rsem_log_q_200_f)/mean(ihc_pos_t$Rsem_log_q_200_f),sep=' '))
##coefficient of variation in Rsubread FPKM pipeline processed HER2 predictions
print(paste("Coefficient of variation in Rsubread FPKM processed HER2 predictions in HER2(-) BRCA samples",sd(ihc_neg_t$FPKM_log_q_200_f)/mean(ihc_neg_t$FPKM_log_q_200_f),sep="  "))
print(paste("Coefficient of variation in Rsubread FPKM processed HER2 predictions in HER2(+) BRCA samples",sd(ihc_pos_t$FPKM_log_q_200_f)/mean(ihc_pos_t$FPKM_log_q_200_f),sep="  "))
##coefficient of variation in Rsubread TPM pipeline processed HER2 predictions
print(paste("Coefficient of variation in Rsubread TPM  processed HER2 predictions in HER2(-) BRCA samples",sd(ihc_neg_t$TPM_log_q_200_f)/mean(ihc_neg_t$TPM_log_q_200_f),sep="  "))
print(paste("Coefficient of variation in Rsubread TPM processed HER2 predictions in HER2(+) BRCA samples",sd(ihc_pos_t$TPM_log_q_200_f)/mean(ihc_pos_t$TPM_log_q_200_f),sep="  "))
##Calculating standardized mean differences between the HER2(+) and HER2(-) groups
print(paste("Standardized mean difference in predicrion between HER2 (+) and HER2 (-) samples for TCGA Level 3 data :",standardized_mean(m.1=mean(ihc_pos_t$Rsem_log_q_200_f),sd.1=sd(ihc_pos_t$Rsem_log_q_200_f),n.1=length(ihc_pos_t$Rsem_log_q_200_f),m.2=mean(ihc_neg_t$Rsem_log_q_200_f),sd.2=sd(ihc_neg_t$Rsem_log_q_200_f),n.2=length(ihc_neg_t$Rsem_log_q_200_f)),sep=' '))
print(paste("Standardized mean difference in predicrion between HER2 (+) and HER2 (-) samples for Rsubread FPKM data :",standardized_mean(m.1=mean(ihc_pos_t$FPKM_log_q_200_f),sd.1=sd(ihc_pos_t$FPKM_log_q_200_f),n.1=length(ihc_pos_t$FPKM_log_q_200_f),m.2=mean(ihc_neg_t$FPKM_log_q_200_f),sd.2=sd(ihc_neg_t$FPKM_log_q_200_f),n.2=length(ihc_neg_t$FPKM_log_q_200_f)),sep=' '))
print(paste("Standardized mean difference in predicrion between HER2 (+) and HER2 (-) samples for FPKM TPM data :",standardized_mean(m.1=mean(ihc_pos_t$TPM_log_q_200_f),sd.1=sd(ihc_pos_t$TPM_log_q_200_f),n.1=length(ihc_pos_t$TPM_log_q_200_f),m.2=mean(ihc_neg_t$TPM_log_q_200_f),sd.2=sd(ihc_neg_t$TPM_log_q_200_f),n.2=length(ihc_neg_t$TPM_log_q_200_f)),sep=' '))
## t-tests comparing HER(+) and HER(-) prediction
t.test(ihc_pos_t$Rsem_log_q_200_f,ihc_neg_t$Rsem_log_q_200_f)# For TCGA Level 3: p-value = 2.009e-05
t.test(ihc_pos_t$FPKM_log_q_200_f,ihc_neg_t$FPKM_log_q_200_f)#For Rsubread FPKM: p-value = 1.493e-10
t.test(ihc_pos_t$TPM_log_q_200_f,ihc_neg_t$TPM_log_q_200_f)#For Rsubread TPM:p-value = 3.197e-12
par(mfrow = c(1, 1),lwd=4)
actual12 = data12$ActualClass
predictions12 = data12$LUAD_Probability
auc = plotROC(actual12, predictions12, TRUE)
title("TCGA Level 3 LUAD vs LUSC")
actual20 = data20$ActualClass
predictions20 = data20$LUAD_Probability
auc = plotROC(actual20, predictions20, TRUE)
title("Rsubread TPM LUAD vs LUSC")
